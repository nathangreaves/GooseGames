// <auto-generated />
using System;
using MSSQLRepository.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MSSQLRepository.Migrations.LetterJam
{
    [DbContext(typeof(LetterJamContext))]
    partial class LetterJamContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("LetterJam")
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.LetterJam.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CurrentRoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GameStatus")
                        .HasColumnType("int");

                    b.Property<int>("GreenCluesRemaining")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("LockedCluesRemaining")
                        .HasColumnType("int");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RedCluesRemaining")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRoundId");

                    b.HasIndex("SessionId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Entities.LetterJam.LetterCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BonusLetter")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("LetterIndex")
                        .HasColumnType("int");

                    b.Property<Guid?>("NonPlayerCharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlayerLetterGuess")
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("LetterCards");
                });

            modelBuilder.Entity("Entities.LetterJam.NonPlayerCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ClueReleased")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CurrentLetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLettersRemaining")
                        .HasColumnType("int");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentLetterId");

                    b.HasIndex("GameId");

                    b.ToTable("NonPlayerCharacters");
                });

            modelBuilder.Entity("Entities.LetterJam.PlayerState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CurrentLetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CurrentLetterIndex")
                        .HasColumnType("int");

                    b.Property<int?>("FinalWordLength")
                        .HasColumnType("int");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfCluesGiven")
                        .HasColumnType("int");

                    b.Property<int>("OriginalWordLength")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<Guid?>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Successful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrentLetterId");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerStates");
                });

            modelBuilder.Entity("Entities.LetterJam.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClueGiverPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("RoundStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("Entities.LetterJam.Game", b =>
                {
                    b.HasOne("Entities.LetterJam.Round", "CurrentRound")
                        .WithMany()
                        .HasForeignKey("CurrentRoundId");
                });

            modelBuilder.Entity("Entities.LetterJam.LetterCard", b =>
                {
                    b.HasOne("Entities.LetterJam.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.LetterJam.NonPlayerCharacter", b =>
                {
                    b.HasOne("Entities.LetterJam.LetterCard", "CurrentLetter")
                        .WithMany()
                        .HasForeignKey("CurrentLetterId");

                    b.HasOne("Entities.LetterJam.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.LetterJam.PlayerState", b =>
                {
                    b.HasOne("Entities.LetterJam.LetterCard", "CurrentLetter")
                        .WithMany()
                        .HasForeignKey("CurrentLetterId");

                    b.HasOne("Entities.LetterJam.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.LetterJam.Round", b =>
                {
                    b.HasOne("Entities.LetterJam.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
