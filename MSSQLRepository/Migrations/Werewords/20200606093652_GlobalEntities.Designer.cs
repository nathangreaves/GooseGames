// <auto-generated />
using System;
using MSSQLRepository.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MSSQLRepository.Migrations.Werewords
{
    [DbContext(typeof(WerewordsContext))]
    [Migration("20200606093652_GlobalEntities")]
    partial class GlobalEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Werewords")
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Werewords.PlayerResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlayerRoundInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResponseType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerRoundInformationId");

                    b.ToTable("PlayerResponses");
                });

            modelBuilder.Entity("Entities.Werewords.PlayerRoundInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMayor")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SecretRole")
                        .HasColumnType("int");

                    b.Property<Guid>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("PlayerRoundInformation");
                });

            modelBuilder.Entity("Entities.Werewords.PlayerVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteType")
                        .HasColumnType("int");

                    b.Property<Guid>("VotedPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("PlayerVotes");
                });

            modelBuilder.Entity("Entities.Werewords.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MayorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Outcome")
                        .HasColumnType("int");

                    b.Property<int>("RoundDurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("RoundStartedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecretWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SoCloseSpent")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("VoteDurationSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoteStartedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WayOffSpent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("Entities.Werewords.PlayerResponse", b =>
                {
                    b.HasOne("Entities.Werewords.PlayerRoundInformation", "PlayerRoundInformation")
                        .WithMany("Responses")
                        .HasForeignKey("PlayerRoundInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Werewords.PlayerRoundInformation", b =>
                {
                    b.HasOne("Entities.Werewords.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Werewords.PlayerVote", b =>
                {
                    b.HasOne("Entities.Werewords.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
